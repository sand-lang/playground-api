import "./memory"
import "./string"

#[target_os = "darwin"]
namespace std {
    extern fn printf(const i8*, ...) : i32;
    extern fn scanf(const i8*, ...) : i32;

    fn print(str: i8*) {
        printf("%s\n", str);
    }

    alias scan = scanf;
}

#[target_os = "windows"]
namespace std {
    extern fn WriteConsoleA(i8*, i8*, u64, u64*, void*) : bool;
    extern fn ReadConsoleA(i8*, i8*, u64, u64*, void*) : bool;
    extern fn GetStdHandle(u64): i8*;

    fn print(str: i8*) {
        let handle = GetStdHandle(-11);
        let count = std::memory::allocate<u64>(1);

        WriteConsoleA(handle, str, std::strlen(str), count, null);
        WriteConsoleA(handle, "\n", 1 as u64, count, null);

        std::memory::deallocate(count);
    }

    fn scan() : std::string {
        let handle = GetStdHandle(-10);
        let ptr = std::memory::allocate<i8>(4096);

        let read: u64 = 0;
        ReadConsoleA(handle, ptr, 4096, &read, null);

        let str = string::new(ptr, read - 1);

        std::memory::deallocate(ptr);

        return str;
    }
}

namespace std {
    fn print(n: i64) {
        print(std::to_string(n));
    }

    fn print(n: i32) {
        print(std::to_string(n));
    }

    fn print(n: i16) {
        print(std::to_string(n));
    }

    fn print(n: i8) {
        print(std::to_string(n));
    }

    fn print(b: bool) {
        if b {
            print("true");
        } else {
            print("false");
        }
    }

    fn print(str: const std::string&) {
        print(str.ptr);
    }
}
